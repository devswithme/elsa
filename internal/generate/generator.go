package generate

import (
	"fmt"
	"os"
	"path/filepath"
)

// Generator handles the generation process for finding elsabuild files
// Manages the parsing and analysis of Go files with elsabuild build tags
type Generator struct {
	imports map[string]string
}

// NewGenerator creates a new Generator instance
// Initializes a new generator with an empty imports map
func NewGenerator() *Generator {
	return &Generator{}
}

// GenerateDependencies processes all elsabuild files in the target directory
// Finds files with elsabuild tags and processes their dependencies
// Returns an error if the process fails, but continues processing other files
func (g *Generator) GenerateDependencies(targetDir string) error {
	files, err := g.FindElsabuildFiles(targetDir)
	if err != nil {
		fmt.Printf("Warning: failed to find elsabuild files: %v\n", err)
		return nil
	}

	for _, file := range files {
		if err := g.processGenerateDependencies(filepath.Join(targetDir, file)); err != nil {
			fmt.Printf("Warning: failed to process generate dependencies: %v\n", err)
			return nil
		}
	}

	return nil
}

// processGenerateDependencies processes a single file for generation dependencies
// Extracts functions with elsa.Generate calls and analyzes elsa.Set declarations
// Loads constructor information for the found functions
func (g *Generator) processGenerateDependencies(target string) error {
	goModDir, err := g.FindGoModDir(target)
	if err != nil {
		return err
	}

	// Extract functions containing elsa.Generate
	funcs, err := g.ExtractElsaGenerateFuncs(target)
	if err != nil {
		return err
	}

	fmt.Println(funcs)

	sets, err := g.ParseElsaSets(target)
	if err != nil {
		return err
	}

	for key, set := range sets {
		fmt.Println(key, " => ", set)

		for _, s := range set {
			constructors, err := g.LoadConstructors(goModDir, s.PkgPath, []string{s.FuncName})
			if err != nil {
				return err
			}
			fmt.Println(constructors)
		}

	}

	if err := g.GenerateElsaGenFile(target); err != nil {
		return err
	}

	return nil
}

// GenerateElsaGenFile generates an elsa_gen.go file for the target
// Creates a minimal generated file with just the package declaration
// The package name is extracted from the target file
func (g *Generator) GenerateElsaGenFile(target string) error {
	// Extract package name from target file
	packageName := g.extractPackageName(target)

	// Generate the content for elsa_gen.go
	content := g.generateElsaGenContent(packageName)

	// Determine the output path (same directory as target)
	outputDir := filepath.Dir(target)
	outputPath := filepath.Join(outputDir, "elsa_gen.go")

	// Write the generated file
	err := os.WriteFile(outputPath, []byte(content), 0644)
	if err != nil {
		return fmt.Errorf("failed to write elsa_gen.go: %v", err)
	}

	fmt.Printf("Generated: %s\n", outputPath)
	return nil
}

// extractPackageName extracts the package name from the target file
// Parses the Go file to find the package declaration
// Returns "main" as fallback if package name cannot be determined
func (g *Generator) extractPackageName(target string) string {
	node, err := parseFile(target)
	if err != nil {
		// Fallback to "main" if we can't parse the file
		return "main"
	}

	if node.Name != nil {
		return node.Name.Name
	}

	return "main"
}

// generateElsaGenHeader generates the standard header for elsa_gen.go files
// Contains build tags and generation directives
func (g *Generator) generateElsaGenHeader() string {
	return `// Code generated by Elsa. DO NOT EDIT.

//go:generate go run -mod=mod github.com/risoftinc/elsa/cmd/elsa
//go:build !elsabuild
// +build !elsabuild

`
}

// generateElsaGenContent generates the content for elsa_gen.go
// Creates a file with header, package declaration, and optional additional content
func (g *Generator) generateElsaGenContent(packageName string) string {
	var content string

	// Add header
	content += g.generateElsaGenHeader()

	// Add package declaration
	content += fmt.Sprintf("package %s\n", packageName)

	// Add additional content (can be extended in the future)
	content += g.generateElsaGenAdditionalContent()

	return content
}

// generateElsaGenAdditionalContent generates additional content for elsa_gen.go
// This function can be easily extended to add more content like imports, types, etc.
// Currently returns empty string, but can be customized as needed
func (g *Generator) generateElsaGenAdditionalContent() string {
	// TODO: Add additional content here as needed
	// Examples:
	// - Import statements
	// - Type definitions
	// - Function declarations
	// - Constants
	// - Variables

	return ""
}
